name: Transfer Me It
on: [push]

jobs:
  test:
    name: Test with go version
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      minio:
        image: minio/minio
        command: "server /data{1...4}"
        environment:
          MINIO_ACCESS_KEY: FfizvUST5eqWY0jhAulGKcIdLOz09VyvfE5
          MINIO_SECRET_KEY: lhFC48WhyPqVPiQJvthIbdj22KnturqaayT
      redis:
        image: "redis:alpine"

    strategy:
      matrix:
        go: ['1.12', '1.13', '1.14']
    steps:
      - uses: actions/checkout@master

      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go }}

      - name: Fetch cached dependencies
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test
        env:
          DB_HOST: root:root@tcp(db:3306)/transfermeit
          SERVER_KEY: QVcnKozlSUvRSPj0jqjya7vZJLrkKUvKIq0WkpKN
          SESSION_KEY: rps2P8irs0mT5uCgicv8m5PMq9a6WyzbxL7HWeRK
          REDIS_HOST: "redis:6379"
          MINIO_ACCESS_KEY: FfizvUST5eqWY0jhAulGKcIdLOz09VyvfE5
          MINIO_SECRET_KEY: lhFC48WhyPqVPiQJvthIbdj22KnturqaayT
          MINIO_ENDPOINT: "minio:9000"
        run: go test ./... -v
  
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    name: Publish Docker image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: '0'
      - name: Publish to Docker Registry
        uses: docker/build-push-action@v1
        with:
          repository: ${{ github.repository }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tag_with_ref: true
          tag_with_sha: true
      - name: Update Swarm
        if: github.ref == 'refs/heads/master'
        run: |
          curl -f -X POST ${{ secrets.SWARM_HOOK }} \
          -H 'Content-Type: application/x-www-form-urlencoded' \
          -d 'service=notifi-backend_app' \
          -d "repo=${{ github.repository }}" \
          -d "sha=${{ github.sha }}" \
          -d "token=${{ secrets.HOOK_TOKEN }}"